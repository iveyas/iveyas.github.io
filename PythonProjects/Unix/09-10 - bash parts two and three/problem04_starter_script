#!/bin/bash
#
# incomplete bash script for checking format of file generated by last -Faw
# supply between 1 and 3 parameters:
# -.   the name of a nonempty file to check
# -.   the name of a file containing one line: a pattern that checks for records for ongoing sessions (default: problem1_pattern.txt)
# -.   the name of a file containing one line: a pattern that checks for records for completed sessions (default: problem2_pattern.txt)

# **** parameter checking and initialization ****

# --- ---- supporting routine: checks if argument exists and is a nonempty regular file --- ----

function assert_nonempty_regular_file {
  if [ ! -e $1 ]; then  echo '??' $0: file "$1" doesn\'t exist         >/dev/stderr;  exit 2; fi
  if [ ! -f $1 ]; then  echo '??' $0: item "$1" isn\'t a regular file  >/dev/stderr;  exit 2; fi
  if [ ! -s $1 ]; then  echo '??' $0: file "$1" is empty               >/dev/stderr;  exit 2; fi
}

# --- parameter checking proper ----

if [ $# -lt 1 -o $# -gt 3 ]; then echo '??' $0: between 1 and 3 args required: "$#" supplied >/dev/stderr; exit 2;  fi

file_to_check=$1
assert_nonempty_regular_file "$file_to_check"

still_logged_in_pattern=${2:-'problem1_pattern.txt'}
assert_nonempty_regular_file "$still_logged_in_pattern"

logged_out_pattern=${3:-'problem2_pattern.txt'}
assert_nonempty_regular_file "$logged_out_pattern"

# **** main body of script starts here ****

# finish this script.
#
# compute 
entireFile=$(cat $file_to_check | wc -l)
loggedIn=$(grep -P -f $still_logged_in_pattern | wc -l)
notLoggedIn$(grep -P -f $logged_out_pattern | wc -l)

echo entireFile loggedIn notLoggedIn

if 
entireFile = loggedIn + notLoggedIn + 2)
echo They match
else
echo They do not match
fi 

#   the count of lines in the file
#   the count of lines for sessions that are active (i.e., still logged in)
#   the count of lines for sessions that have ended
#
# if the number of lines in the file equals the sum of the two counts plus 2, then
#    report that the file's format is valid, naming the file in your status message
#    exit with a atatus code of 0
# else, 
#    write appropriate error message to /dev/stderr, 
#       reporting that the file's format is invalid, naming the file in your status message
#       reporting the number of lines with invalid formats
#    then exit with a status code of 1

